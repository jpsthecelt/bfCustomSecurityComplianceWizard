<?xml version="1.0" encoding="UTF-8"?>
<BES>
    <Wizard>
        <Title>Compliance Checklist Creation Wizard TEST: 7.21.11-John Singer, singerj@us.ibm.com, BigFix-IBM, 510-367-3654</Title>
         <UIHooks Menu="Wi&amp;zards" NavBar="Wizards" LaunchType="Dialog"></UIHooks>

        <DefaultPage>page0</DefaultPage>
        <Page Name="page0">
            <Title>Compliance Checklist Creation Wizard</Title>
            <HTML>
            <![CDATA[
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<style type="text/css" title="currentStyle">
@import "C:/Program Files (x86)/BigFix Enterprise/BES Console/CUSTOM/DataTables-1.7.5/css/demo_page.css";

@import "C:/Program Files (x86)/BigFix Enterprise/BES Console/CUSTOM/DataTables-1.7.5/css/demo_table_jui.css";

@import
	"C:/Program Files (x86)/BigFix Enterprise/BES Console/CUSTOM/jquery-ui-1.8.9/css/redmond/jquery-ui-1.8.9.custom.css";

@import
	"C:/Program Files (x86)/BigFix Enterprise/BES Console/CUSTOM/DataTables-1.7.5/plugins/TableTools-2.0.0/css/TableTools_JUI.css";

body {
	font-family: "Trebuchet MS", Verdana, Arial, Helvetica, sans-serif;
}

.ui-dialog {
	font-size: small;
}
</style> 
<script type="text/javascript" src="C:/Program Files (x86)/BigFix Enterprise/BES Console/CUSTOM/jquery-1.4.4/jquery-1.4.4.min.js" type="text/javascript"></script>
<script type="text/javascript" src="C:/Program Files (x86)/BigFix Enterprise/BES Console/CUSTOM/DataTables-1.7.5/js/jquery.dataTables.min.js"></script>
<script type="text/javascript" src="C:/Program Files (x86)/BigFix Enterprise/BES Console/CUSTOM/jquery-ui-1.8.9/jquery-ui-1.8.9.custom.min.js"></script>
<script type="text/javascript" src="C:/Program Files (x86)/BigFix Enterprise/BES Console/CUSTOM/DataTables-1.7.5/plugins/TableTools-2.0.0/js/TableTools.js"></script>
<script type="text/javascript" src="C:/Program Files (x86)/BigFix Enterprise/BES Console/CUSTOM/DataTables-1.7.5/plugins/TableTools-2.0.0/js/ZeroClipboard.js"></script>
<script type="text/javascript" src="C:/Program Files (x86)/BigFix Enterprise/BES Console/CUSTOM/json2.js"></script>

<script type="text/javascript" charset="utf-8">
	var sTable;
	var dTable;
	var detailsTable;
	var gTgtArray = new Array();	
	var bCreateSite = false;
	var gSkipui = true;
//debugger;
	$(document)
			.ready(
					function() {
  						sTable = $("#srcTable").dataTable();
 					dTable = $("#dstTable").dataTable();
					
/* (click function used to be here)
//debugger;
						// Using default init instead; just adding rows 'as we go'
 						sTable = $('#srcTable')
								.dataTable(
										{
											"aoColumns" : [ null, null, null, null ],
											"aaSorting" : [ [ 1, 'asc' ] ],
											"bInfo" : true,
											"bPaginate" : true,
 											"bStateSave" : false,
											"bProcessing" : true,
											"iDisplayLength" : 10
										});

 						dTable = $('#dstTable').dataTable(
										{
											"aoColumns" : [ null, null, null, null ],
											"aaSorting" : [ [ 1, 'asc' ] ],
											"bInfo" : true,
											"bPaginate" : true,
											"bStateSave" : false,
											"bProcessing" : true,
											"iDisplayLength" : 10,
										});
*/
						// Using default init instead; just adding rows 'as we go'
						$("#srcTable tbody").click(function(event) {
							row = event.target.parentNode;
							detailsTable = sTable.fnGetData(row);
							dTable.fnAddData(detailsTable, true);
							sTable.fnDeleteRow(row, null, true);
						});
						
						$("#dstTable tbody").click(function(event) {
							row = event.target.parentNode;
							detailsTable = dTable.fnGetData(row);
							sTable.fnAddData(detailsTable, true);
							dTable.fnDeleteRow(row, null, true);
						});	
						$("#resultsDiv").hide();						

				});


	function fnGetSelected(oTableLocal) {
		var aReturn = new Array();
		var aTrs = oTableLocal.fnGetNodes();

		for ( var i = 0; i < aTrs.length; i++) {
			if ($(aTrs[i]).hasClass('row_selected')) {
				aReturn.push(aTrs[i]);
			}
		}
		return aReturn;
	}
	
	function addPrologue() {
//		var description = $('#prologueText').text();
		alert("addPrologue(): Adding prologue here");
		return;
		}
</script>
</head>
<body class="example_alt_pagination">
	<!-- TheDataStore is a special object that persists across pages. Use it to save user inputs between pages -->
	<div id="TheDataStore"
		style="DISPLAY: none; LEFT: 0px; POSITION: absolute; TOP: 100%">
		<!-- selected computer properites -->
		<div id="Author">7.21.11-John Singer, singerj@us.ibm.com,
			BigFix-IBM, 510-367-3654</div>
		<div id="StandardsFilterSave"></div>
		<div id="CategoryFilterSave"></div>
		<div id="MimeFilterSave"></div>
		<div id="fxlSelectedTuples"></div>
		<div id="fxlCopiedTuples"></div>
	</div>
	(Click Arrow Icon To Toggle Controls Criteria)	
	<img border="0" src="open.gif" alt="criteria toggle" onclick="toggleCriteria()" />
	<div id="searchform">
		<h1>
			Build Compliance Checklist from Controls Library
			</h3>
			<p>Select the appropriate Security Guidance and Move Desired Controls from Source to Destination (or back) by 'clicking' each one:</p>
			<hr>
			<label for="cklistName">New Checklist Name: </label> <INPUT
				id="cklistName" size=30 value="" /></br>
			</br> <em style="font-weight: bold">Checklist Filters: </em></br> <label
				for="srcStandards">Choose Security Standard Guidance-NIST: </label>
			<select class="sourceStd" id="srcStandards">
				<option name="securityGuidance">(none)</option>
			</select> </br> <label for="srcCategory">Choose Filter Category: </label> <select
				class="sCategory" id="srcCategory">
				<option name="categories">(none)</option>
			</select> </br> <label for="srcMimeField">Choose Custom Mime Filter
				Category: </label> <select class="sMime" id="srcMimeField">
				<option name="mimes">(none)</option>
			</select> </br> <INPUT type="button" name="button3" value="Show Source Controls"
				onClick="fillSrcControls(this)" /> <input type="checkbox"
				name="findByRelvanceReqd" onclick="displayRelevanceBox()"
				value="findByRelevance" unchecked />Show the Relevance? </br>

			<div id="SrchByRel" class="indented" style="display: none">
				<div id="RelTxt" class="indented">...or Select Controls via
					Relevance (search Text):</div>
				<INPUT id="computedRelevance" size=100 wrap="on"
					value='(name of it,id of it) of fixlets whose site of it contains "/SitenameGoesHere/"'
					onKeyDown="checkEnter()" /> </br> <span class="optionSpan"></span>
				<BUTTON id="ButtonLookup" class="buttonStyle" type="button"
					onclick="justDoLookup()">Find Fixlets By Relevance</BUTTON>
				</br>
				</br>
			</div>
			<div id="searchingDiv" style="display: none">
				<strong>Searching...</strong>
			</div>
	</div>

	<div id="searchDiv">
	<p>(Move Desired Controls from Source to Destination (or back) by 'clicking' each one)</p>	
		<table id="srcTable" class="display" width="100%">
			<thead>
				<tr>
					<th width="10%">Source Fixlet ID</th>
					<th width="60%">Source Fixlet Name</th>
					<th width="10%">Applicable Computers</th>
					<th width="20%">SiteID</th>							
				</tr>
			</thead>
			</br>
			</br>
			<tbody id="tablebody">
			</tbody>
		</table>
	</div>
	<div id="resultsDiv">
		<table id="dstTable" class="display" width="100%">
			<br />
			<br />
			<div id="dstTitle">
				<h3></h3>
				<INPUT type="button" name="button4"
					value="Accept Controls for This Checklist"
					onClick="editSrcControls(this)" /> (Remember that you can remove
				controls from the 'New Checklist' by 'clicking' them)
			</div>
			<thead>
				<tr>
					<th width="10%">Destination Fixlet ID</th>
					<th width="60%">Destination Fixlet Name</th>
					<th width="10%">Applicable Computers</th>
					<th width="20%">SiteID</th>					
				</tr>
			</thead>
			<tbody id="tablebody">
			</tbody>
		</table></br>
		<div id="importOptsDiv" style="DISPLAY: none"></br>
			<input type="checkbox" name="individualedit" onclick="individualEdit()" unchecked />Edit each
			fixlet individually?      				<input type="checkbox" name="prologueName" onclick="addPrologue()"
				value="prologue" unchecked />Name of Prologue File <label for="prologueName"> 
				</br> 
				<input type="checkbox" name="prepostpendstring"
				value="prepostpend" unchecked />Prepend/(suffix)<label for="prependName">
				</label> 
				<INPUT id="prependName" size=30 value="" />   To Each Fixlet Name.  </br> 
				<input type="checkbox" name="seqedit" onclick="seqEdit()" value="secEdit"
				unchecked />Every Time You Find: <label for="seqEditSrchText"></label> 
				<INPUT id="seqEditSrchText" size=30 value="(find)" /><label
				for="seqEditReplaceText">,  Replace With: </label> 				
				<INPUT id="seqEditReplaceText" size=30 value="(replace-with)" /><br/><br/>
				<INPUT type="button" name="button4" value="Accept Controls for This Checklist"
					onClick="doFinish()" /><br/>
				<INPUT type="button" name="button4" value="Reset Checklist"
					onClick="editSrcControls(this)" />										
		</div>
	</div>

	<div id="showDetails"></div>
	<div id="showError"></div>
	<script language="javascript" type="text/javascript">
	/* Initial Flow of Execution */
		var results;
		var fxlArray;
		var showOrHide = true;

		var gDebug = 0;
		var tVar = 0;
//debugger;
		var secGuidanceSrc = EvaluateRelevance('names of all bes sites whose (name of it contains "SCM" or name of it contains "checklist" or name of domains of it contains "Security Configuration")');
		var categoryList = EvaluateRelevance('unique values whose (length of it > 1) of (item 0 of it &"-"& item 1 of it) of ((if (exists source id of it) then (concatenations "%0a" of (source id of it as string)) else ("<NA>")),(if (exists category of it) then (concatenations "%0a" of (category of it as string)) else ("<NA>"))) of fixlets whose (name of it as string as lowercase does not contain "control parameterization") of all bes sites whose (name of it contains "SCM" or name of it contains "checklist" or name of domains of it contains "Security Configuration")');

		var mimeCustomFields = EvaluateRelevance('unique values of names of mime fields of fixlets whose (name of it as string as lowercase does not contain "control parameterization" ) of all bes sites whose (name of it contains "SCM" or name of it contains "checklist" or name of domains of it contains "Security Configuration")');
		initialSettings();


/* Routine Definitions */

		function initialSettings() {
			$('StandardsFilterSave').val("");
			$('CategoryFilterSave').val("");
			$('MimeFilterSave').val("");

			fillSrcStandards();
			fillCategories();
			fillMimeFilter();

			return true;
		}
		
		function fillSrcStandards() {
			$.each(secGuidanceSrc, function(i) {
				$('<option>' + secGuidanceSrc[i] + '</option>').appendTo(
						'#srcStandards');
			});
		}
		
		function fillCategories() {
			$.each(categoryList, function(i) {
				$('<option>' + categoryList[i] + '</option>').appendTo(
						'#srcCategory');
			});
		}
		
		function fillMimeFilter() {
			$.each(mimeCustomFields, function(i) {
				$('<option>' + mimeCustomFields[i] + '</option>').appendTo(
						'#srcMimeField');
			});
		}
		
		function makeTable(FixletsArr) {
			try {
//			debugger;			
				var finalFixletTable = JSON.stringify(FixletsArr);
				var tVar = $(finalFixletTable).appendTo('#fxlSelectedTuples');				
			} catch (E) {
				errorMessage("makeTable(): Problem stringifying fixlets: "
						+ E.description);
				//                errFlg = true;
			}					
		}
		function findFixlets(sourceRelevance) {
			var tArray = new Array();
			//            var tarea = $("#SrcPaste");
//			debugger;
			try {
				tArray = EvaluateRelevance(sourceRelevance);

			} catch (E) {
				errorMessage("findFixlets(): Problem finding fixlets: "
						+ E.description);
				//                errFlg = true;
			}

			$.each(tArray, function(i) {
				var tmp1 = tArray[i].split("|");
				if (!tmp1[0] || !tmp1[1])
					return true; // same as a continue

				sTable.fnAddData([ tmp1[0], tmp1[1], tmp1[2], tmp1[3] ], true);
/*
				tVar = $(tmp1[0]).appendTo('#fxlSelectedTuples');
				$("-").appendTo('#fxlSelectedTuples');
				$(tmp1[1]).appendTo('#fxlSelectedTuples');
*/
			});
//				debugger;			
			var errFlg = false;
//			return gTgtArray;
		}
		function displayRelevanceBox() {
			$('computedRelevance').val($('#SearchText'));
			$('#SrchByRel').toggle();
		}
		function toggleCriteria() {
            if (showOrHide) {
            	showOrHide = false;            	
            	$("img").attr("src","closed.gif");
            } else {
            	showOrHide = true;            	
            	$("img").attr("src","open.gif");
            }
            $('#searchform').toggle(showOrHide);            
		}
		function seqEdit() {
		}
		function individualEdit() {
//			debugger;
		try {
			var $checkbox = $(this).find(':checkbox'); 
			gSkipui = $checkbox.attr('checked', !$checkbox[0].checked);
			} catch (E) {
				alert("individualEdit(): error - "+E.description);
			} 			
		}		
		function checkEnter() {
		}
		function prependEdit() {
		}
		function editSrcControls(thingie) {	
//		debugger;
//		try {
//			var $checkbox = $(this).find(':checkbox'); 
//			gSkipui = $checkbox.attr('checked', !$checkbox[0].checked);
//		} catch (E) {
//			alert("editSrcControls(): error - "+E.description);
//		} 		
					
		$("img").hide();
		$("tcc").hide();
		$("#searchDiv").hide();
		$("#importOptsDiv").show();
		$("#multiButton").attr('value', 'Import Fixlets to New Checklist');
		$("#multiButton").click("doImport()");


// Here, we create the data structure later used for calling CopyFixletsToSite()
//			$.each(dTable, function(i) {	
			for (var i=0; i<dTable.fnGetData().length; i++) {
				var tmp1 = 	dTable.fnGetData(i);
				var obj = {
					fixletID: tmp1[0],
					siteID: tmp1[3]
				}			
				gTgtArray.push(obj);
//			});	
			}		
//			doFinish(gTgtArray);
		}
		function justDoLookup() {
			alert("justDoLookup(): Yep, just Do Lookup Via Relevance");
//			debugger;			
		}
		function doImport() {
			alert("doImport(): Yep, Importing now");
//			debugger;			
		}
		function fillSrcControls(t) {
//		debugger;
			try {
				var r1 = '';
				var r2 = '';
				var searchRel = '';
				bCreateSite = EvaluateRelevance("not (number of all bes sites whose (name of it contains \""+$("#cklistName").val()+"\") > 0)");
				$("#dstTitle h3").html($("#cklistName").val());
				searchingDiv.style.display = 'block';
				sTable.fnClearTable();
				dTable.fnClearTable();
				var stdsFilterSave = $('#srcStandards option:selected').val();
				var catFilterSave = $('#srcCategory option:selected').val();
				var mimeFilterSave = $('#srcMimeField option:selected').val();

				r2 = $('#srcStandards option:selected').val() != "(none)" ? 'name of it contains "'
						+ stdsFilterSave + '"'
						: '';
				if (r2.indexOf("undefined")>=0)
					r2 = '';
				r1 += $('#srcCategory option:selected').val() != "(none)" ? ' and category of it contains "'
						+ catFilterSave.split("-")[1] + '"'
						: '';
				if (r1.indexOf("undefined")>=0)
					r1 = '';						
				r1 += $('#srcMimeField option:selected').val() != "(none)" ? ' and name of mime field of it contains "'
						+ mimeFilterSave + '"'
						: '';
				
				if (bCreateSite) {
					searchRel  = '(id of it as string & "|" & name of it & "|" & number of applicable computers of it as string&"|"& id of site of it as string) of fixlets whose (name of it as string as lowercase does not contain "control parameterization"'
						+ r1
						+ ') of all bes sites whose ('
						+ (r2.length > 0 ? r2 + ')' : ')');
				} else
				{
//				debugger;
				searchRel  = '(id of it as string & "|" & name of it & "|" & number of applicable computers of it as string&"|"& id of site of it as string) of fixlets whose (name of it as string as lowercase does not contain "control parameterization"'
						+ r1
						+ ') of all bes sites whose ('
						+ (r2.length > 0 ? r2 + ')' : ')');					
				}
				// finds all fixlets matching a specific name, obtains an array of fixlet objects
				//       as (id|fixletname) & returns an HTML table which will be used to display these objects
				var fTable = findFixlets(searchRel);
				//            $("#SrcPaste").val(makeTable(findFixlets(searchRel)));

			} catch (err) {

				$("#showError").html(
						'<p><strong>Error retrieving results: </strong>'
								+ err.message + '</p>');
				showError = $("#showError").dialog({
					autoOpen : true,
					resizable : false,
					maxHeight : 700,
					maxWidth : 700,
					minHeight : 200,
					minWidth : 200,
					modal : true,
					dialogClass : 'ui-state-error',
					title : "Error",
					buttons : {
						"Ok" : function() {
							$(this).dialog("close");
						}
					},
					close : function() {
						$(this).dialog("destroy");
						$("#showError").html('');
					}
				});
			}

			$('#computedRelevance').val(searchRel);
			searchingDiv.style.display = 'none';
			toggleCriteria();
			$("#resultsDiv").show();			
		}

		function loadXML(dname) {
//		debugger;		
			var XmlDoc, errFlg;
			if (document.implementation
					&& document.implementation.createDocument) {
				XmlDoc = document.implementation.createDocument("", "", null);
				XmlDoc.async = false;
				XmlDoc.load(dname);
				return XmlDoc;
			}
			// IE 5 and IE 6
			else if (window.ActiveXObject) {
				var arrSignatures = [ "MSXML2.DOMDocument.5.0",
						"MSXML2.DOMDocument.4.0", "MSXML2.DOMDocument.3.0",
						"MSXML2.DOMDocument", "Microsoft.XmlDom" ];

				for ( var i = 0; i < arrSignatures.length; i++) {
					errFlg = 0;
					try {
						XmlDoc = new ActiveXObject(arrSignatures[i]);
					} catch (oError) {
						errFlg = 1;
					}

					if (errFlg == 0) {
						XmlDoc.async = false;
						XmlDoc.load(dname);
						return XmlDoc;
					}
				}
			}
			alert("loadXML(): Error loading document");
			return null;
		}
	function CopyFixletsToSite(sourceFixlets, skipUI, destinationSite,openDocuments, bCreate) {
		var multipleItems = new ActiveXObject("Microsoft.XMLDOM");
		if (bCreate)
			CreateCustomSite( destinationSite );
		multipleItems
				.loadXML('<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd"></BES>');

		if (skipUI) {
			multipleItems.childNodes[0].setAttribute("SkipUI", "true");
		} else {
			multipleItems.childNodes[0].setAttribute("SkipUI", "false");
		}

		for ( var i in sourceFixlets) {
			var singleItem = new ActiveXObject("Microsoft.XMLDOM");
			singleItem.loadXML(Relevance("(fixlet " + sourceFixlets[i].fixletID
					+ " of bes site whose (id of it = "
					+ sourceFixlets[i].siteID + ")) as xml"));
			multipleItems.childNodes[0]
					.appendChild(singleItem.childNodes[1].childNodes[0]);
		}

		return ImportXMLToSite(multipleItems.xml, destinationSite, openDocuments);
	}
	
		function doFinish() {
//		debugger;
	
		try { 
			var success = CopyFixletsToSite( gTgtArray, gSkipui, $("#cklistName").val(), false, bCreateSite );
		} catch (E) {                        
				errorMessage("doFinish(): Problem importing Fixlet Set" + E.description);
				errFlg = true;
		}			
			
			return true;
		}
	</script>
</body>

]]>
            </HTML>
        </Page>
        <Page Name="page1">
             <Title>Data Page for CORRUPT PATCH Wizard</Title>
<HTML>
<![CDATA[
<xml id="XMLToImport">
<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
    <Fixlet>
        <Title>Corrupt Patch Template-#date#</Title>
        <Description>Produced by Corrupt Patch Wizard - Id=#id# </Description>
        <Relevance>#relevance#</Relevance>
        <Source>Internal</Source>
        <SourceReleaseDate>#date#</SourceReleaseDate>
        <DefaultAction ID="Action1">
            <Description>
                <PreLink></PreLink>
                <Link>here </Link>
                <PostLink></PostLink>
            </Description>
            <ActionScript MIMEType="application/x-Fixlet-Windows-Shell">#actionscript#</ActionScript>
        </DefaultAction>
    </Fixlet>
</BES> 
</xml>
]]>    
</HTML>            
        </Page>

    </Wizard>
</BES>

